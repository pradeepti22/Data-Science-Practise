Linear Regression is a Supervised ML algorithm. We use this to find continuous numeric relationship between data. 
One dependent variable(Y) is checked against one or more independent variables(X) to find if there is a relationship between them. 
Their relationship is explained in an equation y = mx + c. 
In this project, I have used the data points of waist circumference from the dataset to build a Linear regression ML model 
and made predictions on fat content based on the waist circumference. I did this in both R and Python
---

In RStudio

---
title: "Untitled"
output: html_document
---
```{r}
require(dplyr)
require(tidyverse)
require(ggplot2)
```


loading the dataset. to predict the fat based on waist circumference(without a CT scan)
```{r}
df=read_csv("fat.csv")
```

exploring the dataset
```{r}
str(df)
```

```{r}
summary(df)
```

```{r}
head(df,3)
colnames(df)
```

```{r}
attach(df)
#plot(waist, fat)
cor(waist, fat)
```

```{r}
colSums(df)

sd(df$fat)
sd(df$waist)
```

building a ML model using linear regression: accuracy 67% and significant p value.
```{r}
m1=lm(fat~waist, data=df)
summary(m1)
```

applying exponential transformation on fat(y) to improve accuracy: accuracy 70%
```{r}
em1=lm(log(fat)~waist, data = df)
summary(em1)
```

predicting values of y, given x
```{r}
Predicted_Value=predict(em1, data=df)
as.data.frame(Predicted_Value)
```

combining the predicted values to orginal dataset
```{r}
new=cbind(df, Predicted_Value)
new
```

##In Python using Jupyter notebooks

#importing libraries
import pandas as pd
import matplotlib.pyplot as mt
import numpy as np
import statsmodels.formula.api as sm

#loading the dataset. trying to predict the fat content based on circumference of waist
df = pd.read_csv("R:\\LEARN\\Data analyst training\\fat.csv")

#exploring the dataset
df.shape

df.head()

mt.plot(df.waist, df.fat, ".")

#correlation
df.waist.corr(df.fat)

#building a linear regression model. accuracy is only 67%, p value <0.05, so variables are significant
m1=sm.ols("fat~waist", data=df).fit()

m1.summary()

#enhancing the accuracy by using exponential transformation. accuracy increased to 70%. variables are significant. 
m2 = sm.ols("np.log(fat)~waist", data = df). fit()
m2.summary()

p = m2.predict(df)

#adding the predicted values as a column to original dataset
df['Predicted'] = p

df

